// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
 // we use Memory-Mapped I/O
class Screen {

    static bool color;
    static Array bitMask;
    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int currentVal;

        let color = true;
        let currentVal = 1;
        let bitMask = Array.new(7);
        while(i<16){
            let bitMask[i] = currentVal;
            //making sure that each bit would have 1 and then zero in each location
            let currentVal = currentVal + currentVal;
            let i = i+1; 
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        // keyboard address 
        while(i < 24576)
        {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

      function void drawPixel(int x, int y) 
    {
        var int addr;
        var int pixelValue;
        var int bitIndex;
        var int xDiv16;

        if((x < 0) | (x > 511) | (y < 0) | (y > 255))
        {
            do Sys.error(7);
        }

        let xDiv16 = x / 16;
        //getting the remindedr of x
        let bitIndex = x - (xDiv16 * 16);
        let addr = 16384 + ((y * 32) + xDiv16);
        let pixelValue = Memory.peek(addr);
        if(color)
        {
            let pixelValue = bitMask[bitIndex] | pixelValue;
        }
        else
        {
            let pixelValue = (~bitMask[bitIndex]) & pixelValue;
        }
        do Memory.poke(addr, pixelValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy,a,b;
        var int diff;
        var int xBase, xEnd;
        var int yBase, yEnd;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        //if dx or dy are zero then we need to draw stright line
        if(dx = 0)
        {
            let yBase = y2;
            let yEnd = y1;
            if(y1 < y2)
            {
                let yBase = y1;
                let yEnd = y2;
            }
            while(~(yBase > yEnd))
            {
                do Screen.drawPixel(x1, yBase);
                let yBase = yBase + 1;
            }
        }
        if(dy = 0)
        {
            let xBase = x2;
            let xEnd = x1;
            if(x1 < x2)
            {
                let xBase = x1;
                let xEnd = x2;
            }
            while(~(xBase > xEnd))
            {
                do Screen.drawPixel(xBase, y1);
                let xBase = xBase + 1;
            }
        }

        while((~(a > dx)) & (~(b > dy)))
        {
            let diff = a*dy - b*dx;
            do Screen.drawPixel(x1+a,y1+b);
            do Screen.drawPixel(x1+a+2,y1+b+2);
            do Screen.drawPixel(x1+a+1,y1+b+1);
            if(diff < 0)
            {   
                let a = a+1;
                let diff = diff +dy;
            } 
            else
            {
                let b = b+1;
                let diff = diff -dx;
            }
        }

        return;
       
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    // function void drawRectangle(int x1, int y1, int x2, int y2) {
    // }

    // /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    // function void drawCircle(int x, int y, int r) {
    // }
}
